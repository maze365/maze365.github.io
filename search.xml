<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AI 相关工具</title>
    <url>/AI-%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7.html</url>
    <content><![CDATA[<p>最近关于 AI 的热度非常高，我也去试用了一下，很厉害，非常惊喜。它的发展上限非常高。<br>推荐几款工具，可以尝试使用下。</p>
<ul>
<li><p><a href="https://yiyan.baidu.com/" target="_blank" rel="noopener">文心一言</a><br>这个是百度的 AI 聊天页面，不过需要申请，现在申请人数很多，审批也很慢。<br>用了几次，发现文心一言对于上下文的理解比较弱。</p>
</li>
<li><p><a href="https://chatdoc.com/chatdoc/" target="_blank" rel="noopener">chatdoc</a><br>这是一款用 AI 开发出来的工具，可以用来解读 PDF，上传 PDF 之后，可以随便问里面相关的内容，是一款很方便的工具。<br>每天限制 5 篇，但没有网络的限制。</p>
</li>
<li><p><a href="https://www.notion.so/zh-cn" target="_blank" rel="noopener">Notion</a><br>这个是一款国外开发的笔记工具，像国内的 wolai 就是参考这个笔记工具开发的。Notion 内置了 AI，调用了 ChatGPT，也就是说不需要去注册 ChatGPT 账号就可以使用了。记得不要用网易邮箱注册账号。<br>不过它只有英文版，想使用中文版的话需要下载它的客户端，然后导入一个中文的翻译文件，网上有相关的教程。我的建议是使用网页版就可以，所谓的客户端实际上还是一个网页，目前优化不是很好，winddows 端缩小化再打开，会白屏几秒。</p>
</li>
</ul>
<p>有限制，注册用户有 20 次的免费提问的机会，次数用完之后需要付费，每个月 $10。</p>
<ul>
<li><p><a href="https://www.cursor.so/" target="_blank" rel="noopener">Cursor | Build Fast</a><br>这是一款 AI 编程的软件，openAI 官方开发的，建议程序员都可以尝试使用下，特别是初学者感觉用处应该最大，目前最新版已经能安装 vscode 的扩展了。<br>相关使用教程可以看这个，非常容易，只需要两个快捷键 ctrl + k，ctrl + l <a href="https://zhuanlan.zhihu.com/p/615818924" target="_blank" rel="noopener">不用科学上网，免费的GPT-4 IDE工具Cursor保姆级使用教程 - 知乎 (zhihu.com)</a></p>
</li>
<li><p><a href="https://aibot.geekbang.com/" target="_blank" rel="noopener">AI 学习助手 - 极客时间 (geekbang.com)</a><br>这个是我登录极客时间发现居然可以像 AI 提问问题，但是不清楚调用的是哪个 AI。似乎不能开启新话题。</p>
</li>
<li><p>阿里，现在也出了一个 AI 可以申请，不过目前只有公司能申请，还没有开放个人的申请。</p>
</li>
<li><p><a href="https://www.so.com/zt/invite.html#/" target="_blank" rel="noopener">360</a><br>360 的也开始企业内测了，大家都没有说一下子就放开给所有人访问。<br>实际上国内的情况，真的人太多，谁的资源都撑不住，只能限制。</p>
</li>
<li><p><a href="https://www.anthropic.com/" target="_blank" rel="noopener">Claude</a><br><a href="/Claude-使用教程.html">Claude 使用教程</a><br>有个新的 AI 工具叫 claude，没和 GPT 对比，但这个很明显比百度的要优秀。不用科学上网。生成速度和 cursor 一样快，同时还可以返回中文。<br>不过有时候访问会卡顿。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 自定义主题</title>
    <url>/hexo%20%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98.html</url>
    <content><![CDATA[<p>参考文章：<a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html</a></p>
<p>NexT官方主题配置：<a href="https://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">https://theme-next.iissnan.com/theme-settings.html</a></p>
<p>第三方服务集成：<a href="http://theme-next.iissnan.com/third-party-services.html#comment-system" target="_blank" rel="noopener">http://theme-next.iissnan.com/third-party-services.html#comment-system</a></p>
<h2 id="menu-再多加一个-tags"><a href="#menu-再多加一个-tags" class="headerlink" title="menu 再多加一个 tags"></a>menu 再多加一个 tags</h2><p>找到<code>themes/next/_config.yml</code>，打开<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DTS"><figure class="iseeu highlight /dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line">  <span class="meta">#about: /about/ || user</span></span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags  <span class="comment">//将注释去除掉</span></span><br><span class="line">  <span class="meta">#categories: /categories/ || th</span></span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure></div></p>
<p>点开链接，提示 <code>Cannot GET /tags/</code>，不要慌，不能获取tags，创建一个就OK！</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line">$ hexo new<span class="built_in"> page </span><span class="string">'name'</span> # 我们这里要创建的是tags，所以这里name改为tags就好</span><br></pre></td></tr></table></figure></div>
<p>在你的网站根目录下面的 source 文件夹会生成 tags 文件夹。</p>
<p>修改 tags 文件夹中的 index.md 文件，新增 type 属性，如下：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="number">-09</span><span class="number">-27</span> <span class="number">11</span><span class="string">:56:43</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></div></p>
<p>当你新建一篇博文的时候，增加上tags和categories属性值，就能在tags和categories界面检索到你的文章了。</p>
<h2 id="文章链接格式修改"><a href="#文章链接格式修改" class="headerlink" title="文章链接格式修改"></a>文章链接格式修改</h2><p> 默认文章格式是: <a href="http://xxx.com/2015/07/06/your-title/" target="_blank" rel="noopener">http://xxx.com/2015/07/06/your-title/</a> 的格式的,可以修改成 <a href="http://xxx.com/posts/programming/2016-03-18-hello-world.html" target="_blank" rel="noopener">http://xxx.com/posts/programming/2016-03-18-hello-world.html</a> 这样的格式</p>
<p> 根目录下的 _config.yml 文件<br> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ELIXIR"><figure class="iseeu highlight /elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">permalink:</span> posts/<span class="symbol">:category/</span><span class="symbol">:year-</span><span class="symbol">:month-</span><span class="symbol">:day-</span><span class="symbol">:title</span>.html</span><br></pre></td></tr></table></figure></div></p>
<h2 id="修改文章底部的那个带-号的标签"><a href="#修改文章底部的那个带-号的标签" class="headerlink" title="修改文章底部的那个带#号的标签"></a>修改文章底部的那个带#号的标签</h2><p> 改成下图</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/5308475-9f1817d2d7627f7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p> 修改模板 <code>/themes/next/layout/_macro/post.swig</code> ，搜索 <code>rel=&quot;tag&quot;&gt;#</code> ，将 # 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code> </p>
<h2 id="隐藏网页底部powered-By-Hexo-强力驱动"><a href="#隐藏网页底部powered-By-Hexo-强力驱动" class="headerlink" title="隐藏网页底部powered By Hexo / 强力驱动"></a>隐藏网页底部powered By Hexo / 强力驱动</h2><p> 打开 themes/next/layout/_partials/footer.swig,隐藏之间的代码即可，或者直接删除。<br> <img src="http://upload-images.jianshu.io/upload_images/5308475-8e8340c7a0489bce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<h2 id="左侧侧边栏加上展开的分类"><a href="#左侧侧边栏加上展开的分类" class="headerlink" title="左侧侧边栏加上展开的分类"></a>左侧侧边栏加上展开的分类</h2><p> 打开 themes/next/layout/_macro/sidebar.swig<br> 添加内容<br> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APPLESCRIPT"><figure class="iseeu highlight /applescript"><table><tr><td class="code"><pre><span class="line"> &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"category-all-page"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"category-all"</span>&gt;</span><br><span class="line">        &#123;&#123; list_categories(&#123;depth: <span class="number">1</span>&#125;) &#125;&#125;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></div></p>
<p> 参考<a href="https://hexo.io/zh-cn/docs/helpers.html#list-categories" target="_blank" rel="noopener">hexo API</a></p>
<h2 id="添加自定义的css样式"><a href="#添加自定义的css样式" class="headerlink" title="添加自定义的css样式"></a>添加自定义的css样式</h2><p> <code>themes\next\layout\_partials\head.swig</code></p>
<ul>
<li>添加样式支持<br>为了不把原先文件搞得太乱，这里添加自己的样式文件<br>在 <code>themes\next\source\css</code> 文件夹下，打开main.styl文件，在最后添加：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SCSS"><figure class="iseeu highlight /scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//My Layer</span></span><br><span class="line"><span class="comment">//--------------------------------------------------</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"_my/style"</span>;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h2 id="首页改成-archives"><a href="#首页改成-archives" class="headerlink" title="首页改成 archives"></a>首页改成 archives</h2><p>我是简单粗暴的将 <code>themes\next\layout</code> 下的 index.swig 的内容改掉，将 archive.swig 的文件内容复制了过来</p>
<h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><p>安装hexo-generator-searchdb插件<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure></div></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment">#主题配置文件下，这里改成 true</span></span><br></pre></td></tr></table></figure></div>
<h2 id="首页阅读全文"><a href="#首页阅读全文" class="headerlink" title="首页阅读全文"></a>首页阅读全文</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#主题配置文件下，这里改成true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure></div>
<h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p><a href="https://eggsywelsh.github.io/2016/11/10/hexo%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/" target="_blank" rel="noopener">参考文章</a><br><a href="https://blog.shadowy.me/2018/03/16/hexo-next-macpanel-improved/" target="_blank" rel="noopener">参考文章</a></p>
<p>在 themes/next 目录下打开 _config.yml 配置文件，找到 highlight_theme 属性</p>
<p>这里呢可以配置的属性有normal | night | night eighties | night blue | night bright，你可以挨个试一试，看下效果，选择你喜欢的一个属性</p>
<p>光有这个配置还不行，在你的hexo/目录下_config.yml文件中中，找到，并设置如下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span> <span class="comment">#修改为true</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure></div>
<h2 id="开启评论"><a href="#开启评论" class="headerlink" title="开启评论"></a>开启评论</h2><p>在 themes/next 目录下打开 _config.yml 配置文件<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#设置为 true</span></span><br><span class="line">  <span class="attr">shortname:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div></p>
<h2 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h2><p>参考文章：<a href="https://blog.csdn.net/Calvin_zhou/article/details/78820718" target="_blank" rel="noopener">https://blog.csdn.net/Calvin_zhou/article/details/78820718</a></p>
<h2 id="文章添加阅读次数，访问量"><a href="#文章添加阅读次数，访问量" class="headerlink" title="文章添加阅读次数，访问量"></a>文章添加阅读次数，访问量</h2><p><a href="https://blog.csdn.net/xr469786706/article/details/78166227" target="_blank" rel="noopener">参考文章</a></p>
<p>打开 \themes\next\ _config.yml 文件<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#改为 true 开启</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span> <span class="comment">#访问人数</span></span><br><span class="line">  <span class="attr">site_uv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-user"&gt;&lt;/i&gt;</span></span><br><span class="line">  <span class="attr">site_uv_footer:</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span> <span class="comment">#总访问量</span></span><br><span class="line">  <span class="attr">site_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-eye"&gt;&lt;/i&gt;</span></span><br><span class="line">  <span class="attr">site_pv_footer:</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span> <span class="comment">#单篇文章浏览量</span></span><br><span class="line">  <span class="attr">page_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-file-o"&gt;&lt;/i&gt;</span></span><br><span class="line">  <span class="attr">page_pv_footer:</span></span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>定时器 requestAnimationFrame</title>
    <url>/%E5%AE%9A%E6%97%B6%E5%99%A8-requestAnimationFrame.html</url>
    <content><![CDATA[<p>requestAnimationFrame 是什么？<br>它是一个浏览器提供的 API，用于在浏览器重绘之前调用指定的回调函数。它可以让浏览器在重绘之前更新动画/视觉效果，从而实现平滑的动画效果。</p>
<p>使用场景：requestAnimationFrame 经常用来构建平滑的动画效果和视觉效果。比如页面滚动，CSS3 过渡和动画，canvas 动画等。</p>
<p>原理：requestAnimationFrame 将回调函数加入浏览器的回调队列中,在下一次重绘之前调用。一般来说,屏幕刷新频率是 60Hz，也就是说每秒重新绘制 60 次。requestAnimationFrame 试图将重绘与此刷新频率同步，从而实现平滑的动画效果。</p>
<p>与 setTimeout/setInterval 的比较：<br>requestAnimationFrame 与 setTimeout/setInterval 都可以实现定时执行代码的功能，但 requestAnimationFrame 有更好的性能表现。这是因为:</p>
<ul>
<li>requestAnimationFrame 与屏幕刷新同步，只在需要重绘的时候执行回调，而 setTimeout 是按照固定时间间隔执行。</li>
<li>requestAnimationFrame 会把多个回调集中在一起执行，减少重绘次数,而 setTimeout 会每个时间间隔就重绘一次。</li>
<li>requestAnimationFrame 可以保证平滑的动画效果，而 setTimeout 可能由于间隔时间过长产生卡顿感。<br>所以,在不需要严格的时间间隔要求和需要平滑动画的场景下，requestAnimationFrame 是更好的选择。</li>
</ul>
<p>不同浏览器的实现差异：<br>不同浏览器的刷新频率可能不同,实现方式也可能略有差异，这可能会导致动画效果在不同浏览器中有细微的差别。<br>在我的电脑上，屏幕的刷新率是 60Hz，它每一次的刷新频率大概是 16.666ms。</p>
<p>优点：</p>
<ol>
<li>与屏幕刷新频率同步，实现平滑的动画效果；</li>
<li>节省 CPU、GPU 和电量；</li>
<li>避免布局抖动等视觉差异。</li>
</ol>
<p>缺点：</p>
<ol>
<li>回调函数的调用频率受屏幕刷新频率的限制,在低刷新频率下会感觉到卡顿；</li>
<li>若连续调用 requestAnimationFrame，可能会导致过高的 CPU 占用，应避免请求动画帧的频率超过屏幕刷新频率；</li>
<li>部分低端机型的刷新频率较低,动画效果可能不太平滑。</li>
</ol>
<p>使用示例：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 执行动画绘制等逻辑</span></span><br><span class="line">  requestAnimationFrame(animate); </span><br><span class="line">&#125;</span><br><span class="line">requestAnimationFrame(animate);</span><br></pre></td></tr></table></figure></div></p>
<p>可以使用 cancelAnimationFrame 取消一个 requestAnimationFrame 的回调函数。例如：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> rafId;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 执行动画绘制等逻辑</span></span><br><span class="line">  rafId = requestAnimationFrame(animate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startAnimation</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  rafId = requestAnimationFrame(animate); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取消 requestAnimationFrame</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopAnimation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  cancelAnimationFrame(rafId); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime 插件删除不成功</title>
    <url>/sublime%20%E6%8F%92%E4%BB%B6%E5%88%A0%E9%99%A4%E4%B8%8D%E6%88%90%E5%8A%9F.html</url>
    <content><![CDATA[<p>删除 sublime 插件步骤：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMAKE"><figure class="iseeu highlight /cmake"><table><tr><td class="code"><pre><span class="line">Ctrl+Shift+P调出命令面板，输入<span class="keyword">remove</span>，调出<span class="keyword">Remove</span> Package选项并回车，选择要删除的插件并回车；</span><br></pre></td></tr></table></figure></div></p>
<p>打开 <code>preferences</code> - <code>package settings</code> 查看，插件还在，浏览程序包也在。<br>直接删除插件包，插件包重新生成了。</p>
<p>用 <code>ctrl+~</code> 查看控制台，发现了下面的报错信息。<br><code>ImportError: No module named &#39;package_control&#39;</code></p>
<p>以下是解决方法：<br>打开<code>设置-用户</code>的配置文件（非汉化版应该是 <code>user settings</code>）<br><img src="/images/sublime1.png" alt></p>
<p>删除其中一行代码，保存<br><img src="/images/sublime2.png" alt></p>
<p>再重新执行删除的步骤，成功。</p>
]]></content>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>Claude 使用教程</title>
    <url>/Claude-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<p>Claude 是由前 openAI 员工开发的聊天机器人，最重要的一点是不用科学上网。</p>
<p><a href="https://www.anthropic.com/" target="_blank" rel="noopener">Claude官网</a></p>
<p>Slack 内置了 Claude 的应用，我们可以在 slack 内置一下这个应用。</p>
<p>注意，申请 Claude 和注册 Slack 都需要用到邮箱，我们两个地方用同一个邮箱就可以。不能用网易和 qq 邮箱，可以注册个 outlook 邮箱。</p>
<h1 id="申请-Claude"><a href="#申请-Claude" class="headerlink" title="申请 Claude"></a>申请 Claude</h1><p>在<a href="https://www.anthropic.com/" target="_blank" rel="noopener">官网</a>上找到 <code>Meet Claude</code> 按钮，等待跳转页面，再点击 <code>Request Access</code> 按钮，弹出一个弹窗，需要我们填写申请资料。只需要填写红色 * 的项。<br>填完之后点击 <code>Submit</code> 点击提交，这个时候会提示申请成功，可以看到一串英文，里面有 <code>Success</code> 就是成功了。<br>这个申请完基本都会提示成功，很快就能用。</p>
<h1 id="注册-Slack"><a href="#注册-Slack" class="headerlink" title="注册 Slack"></a>注册 Slack</h1><p>进入网站<a href="https://www.anthropic.com/claude-in-slack" target="_blank" rel="noopener">Claude in Slack | Anthropic</a>，<br>点击 <code>Add to Slack</code><br><img src="images/Pastedimage20230413152916.png" alt></p>
<p>创建工作区<br><img src="images/Pastedimage20230413153034.png" alt><br>这个时候输入我们的邮箱，会收到邮件验证码，填写就行。</p>
<p>再点击允许，将 Claude 和 Slack 关联在一起。</p>
<h1 id="添加应用"><a href="#添加应用" class="headerlink" title="添加应用"></a>添加应用</h1><p>我们进入到 <a href="https://slack.com" target="_blank" rel="noopener">Slack</a> 页面，类似聊天的界面，我们可以看到左侧会有个应用，下方默认是空的，我们点添加应用，跳转到下图的页面，在右边的搜索栏里面搜索 <code>Claude</code>，将它添加到我们的应用中。<br><img src="images/20230413153527.png" alt></p>
<p>接着你再点击 Claude 和它聊天就可以了。<br><img src="images/20230413161533.png" alt></p>
]]></content>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>python 文本转成 excel</title>
    <url>/python-%E6%96%87%E6%9C%AC%E8%BD%AC%E6%88%90-excel.html</url>
    <content><![CDATA[<p>环境：<br>python：2.7</p>
<h1 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h1><p>在windows下安装pip： 在C:\python27\scirpts下运行<code>easy_install pip</code>进行安装。</p>
<p>如果不知道是哪个路径，去设置变量那里看看就知道</p>
<h1 id="安装-pandas-和-openpyxl"><a href="#安装-pandas-和-openpyxl" class="headerlink" title="安装 pandas 和 openpyxl"></a>安装 pandas 和 openpyxl</h1><p>可以使用国内镜像安装</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">pip install pandas -i <span class="string">https:</span><span class="comment">//pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure></div>
<p>pip install openpyxl -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p>同时需要设置环境参数，<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MEL"><figure class="iseeu highlight /mel"><table><tr><td class="code"><pre><span class="line">.../<span class="keyword">python</span>  这个是 <span class="keyword">python</span> 的环境参数</span><br><span class="line"><span class="comment">// 需要加多一个</span></span><br><span class="line">../<span class="keyword">python</span>/Script</span><br></pre></td></tr></table></figure></div></p>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>可以使用 Pandas 库的 sort_values() 方法对 DataFrame 进行排序。</p>
<p>例如，如果要按 project 列进行排序，可以这样写：</p>
<p>Copy code<br>df = df.sort_values(‘project’)<br>这将按 project 列的值对 DataFrame 进行排序。</p>
<p>如果要按多列进行排序，可以使用 by 参数指定排序列，例如：</p>
<p>Copy code<br>df = df.sort_values(by=[‘project’, ‘date’])<br>这将按 project 列和 date 列的值对 DataFrame 进行排序。</p>
<p>如果要按降序排序，可以使用 ascending 参数设置为 False，例如：</p>
<p>Copy code<br>df = df.sort_values(by=’project’, ascending=False)<br>这将按 project 列的值从大到小对 DataFrame 进行排序。</p>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-  # 必须加上这个，否则就识别不了中文</span></span><br><span class="line"><span class="comment"># 引入一些库，需要使用 pip 安装</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> openpyxl.utils.dataframe <span class="keyword">import</span> dataframe_to_rows</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是 text，也就是我的工作日报的格式，用这个来解析成 excel</span></span><br><span class="line">text = <span class="string">"""</span></span><br><span class="line"><span class="string"># 日期</span></span><br><span class="line"><span class="string">项目名称</span></span><br><span class="line"><span class="string">- [x] 工作项1</span></span><br><span class="line"><span class="string">- [x] 工作项2</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将工作日报文本转换为 DataFrame</span></span><br><span class="line">df = pd.DataFrame(columns=[<span class="string">'date'</span>, <span class="string">'project'</span>, <span class="string">'task'</span>])</span><br><span class="line"></span><br><span class="line">lines = text.strip().split(<span class="string">'\n'</span>)</span><br><span class="line">project_str = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="keyword">if</span> line.startswith(<span class="string">'#'</span>):</span><br><span class="line">        date = <span class="string">'2022-'</span> + line[<span class="number">1</span>:].strip()</span><br><span class="line">        project_str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">elif</span> line.startswith(<span class="string">'-'</span>):</span><br><span class="line">        task = line.replace(<span class="string">'- [x] '</span>, <span class="string">''</span>)</span><br><span class="line">        df = df.append(&#123;<span class="string">'date'</span>: date, <span class="string">'project'</span>: project_str, <span class="string">'task'</span>: task&#125;, ignore_index=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        project_str = line</span><br><span class="line">df = df.sort_values(by=<span class="string">'project'</span>, ascending=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 将 DataFrame 写入 Excel 文件</span></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> dataframe_to_rows(df, index=<span class="literal">False</span>, header=<span class="literal">True</span>):</span><br><span class="line">    ws.append(r)</span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">"work_log.xlsx"</span>)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>解除端口占用</title>
    <url>/%E8%A7%A3%E9%99%A4%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8.html</url>
    <content><![CDATA[<p>打开 dos 命令窗口输入一下命令</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">netstat -o -n -a <span class="string">| findstr :4000</span></span><br></pre></td></tr></table></figure>
<p>可以看到输出如下：<br><img src="images/20220902172812.png" alt><br>可以看到 LISTENING 同时端口是 4000 那一行，最后面带着一串数字，数字是 3628，这个时候我们输出一行命令，解除掉占用<br><img src="images/20230409134012.png" alt><br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">taskkill <span class="string">/F</span> <span class="string">/PID</span> 3628</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>用 GitHub + hexo 搭建博客</title>
    <url>/%E7%94%A8-GitHub-hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.html</url>
    <content><![CDATA[<ul>
<li>系统：win7 64x</li>
<li>nodejs：v10.8.0</li>
<li><p>npm：6.2.0</p>
<h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><blockquote>
<p><a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a><br>这里我下载了msi程序包。</p>
</blockquote>
</li>
</ul>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step2.png" alt="image"><br>一直点击下一步安装就行了。</p>
<ul>
<li>安装完成后，检测 PATH 环境变量是否配置了 Node.js，点击开始 -&gt; 运行 -&gt; 输入 [ cmd ]  -&gt; 在 dos 窗口中输入命令 [ path ] ，输出如下结果：</li>
</ul>
<blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TAGGERSCRIPT"><figure class="iseeu highlight /taggerscript"><table><tr><td class="code"><pre><span class="line">&gt; PATH=C:<span class="symbol">\o</span>raclexe<span class="symbol">\a</span>pp<span class="symbol">\o</span>racle<span class="symbol">\p</span>roduct<span class="symbol">\1</span>0.2.0<span class="symbol">\s</span>erver<span class="symbol">\b</span>in;C:<span class="symbol">\W</span>indows<span class="symbol">\s</span>ystem32;</span><br><span class="line">&gt; C:<span class="symbol">\W</span>indows;C:<span class="symbol">\W</span>indows<span class="symbol">\S</span>ystem32<span class="symbol">\W</span>bem;C:<span class="symbol">\W</span>indows<span class="symbol">\S</span>ystem32<span class="symbol">\W</span>indowsPowerShell<span class="symbol">\v</span>1.0<span class="symbol">\;</span></span><br><span class="line">&gt; c:<span class="symbol">\p</span>ython32<span class="symbol">\p</span>ython;C:<span class="symbol">\M</span>inGW<span class="symbol">\b</span>in;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\G</span>TK2-Runtime<span class="symbol">\l</span>ib;</span><br><span class="line">&gt; C:<span class="symbol">\P</span>rogram Files<span class="symbol">\M</span>ySQL<span class="symbol">\M</span>ySQL Server 5.5<span class="symbol">\b</span>in;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\n</span>odejs<span class="symbol">\;</span></span><br><span class="line">&gt; C:<span class="symbol">\U</span>sers<span class="symbol">\r</span>g<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p>我们可以看到环境变量中已经包含了C:\Program Files\nodejs\</p>
<blockquote>
<p>我在这里不是安装的c盘</p>
</blockquote>
<p>使用以下命令验证是否安装成功</p>
<ul>
<li>node -v</li>
<li><p>npm -v</p>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><blockquote>
<p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a> </p>
</blockquote>
</li>
</ul>
<p><img src="/images/Snipaste_2018-09-26_16-56-51.png" alt></p>
<p>安装好后可以在开始菜单栏看到git</p>
<ul>
<li>Git Bath 命令行模式</li>
<li>Git GUI 图形界面</li>
</ul>
<p>回到电脑桌面，鼠标右击如果看到有两个git单词则安装成功</p>
<p><img src="/images/Snipaste_2018-09-26_16-57-32.png" alt></p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ul>
<li>首先在本地磁盘中建立一个Hexo文件夹用于存储本地文件(做本地文件保存以及测试使用)</li>
<li>然后在文件夹中右击打开git命令框(Git Bash)</li>
<li>[ npm install -g hexo-cli ] 使用npm安装Hexo ,在git命令框中安装Hexo </li>
<li>[ hexo init ] 初始化<br>新建完成后，指定文件夹的目录如下：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQF"><figure class="iseeu highlight /sqf"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="variable">_config</span>.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── <span class="variable">_drafts</span></span><br><span class="line">|   └── <span class="variable">_posts</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<blockquote>
<p>我在这里出现了 hexo: command not found 的错误，通过搜索，发现是hexo没有添加到环境变量，最后顺利解决。<a href="https://blog.csdn.net/whjkm/article/details/42675579" target="_blank" rel="noopener">参考文章</a> ，没有差错请忽视 quote 文字</p>
</blockquote>
<blockquote>
<p>添加环境变量 <a href="https://jingyan.baidu.com/article/47a29f24610740c0142399ea.html" target="_blank" rel="noopener">参考文章</a></p>
</blockquote>
<blockquote>
<ul>
<li>打开hexo的安装路径，我是安装在e盘，路径如下 [ E:\hexo\node-v10.8.0-win-x64\node-global\node_modules\hexo-cli\bin ] </li>
<li>第一种方法：我的电脑 -&gt; 右键 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; 找到 [ path ] 选择 -&gt; 编辑，加上分号 [ ; ]把路径 [ E:\hexo\node-v10.8.0-win-x64\node-global\node_modules\hexo-cli\bin ] 拷贝进来</li>
<li>第二种方法，点击开始 -&gt; 运行 -&gt; 输入 [ sysdm.cpl ]  -&gt; 高级 -&gt; 环境变量 -&gt; 找到 [ path ] 选择 -&gt; 编辑，加上分号 ; 把路径 [ E:\hexo\node-v10.8.0-win-x64\node-global\node_modules\hexo-cli\bin ] 拷贝进来</li>
<li>环境变量配置好后，记得把 git 关掉再重新打开</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAMS"><figure class="iseeu highlight /gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> npm install -g hexo-cli </span><br><span class="line"><span class="symbol">$</span> hexo init &lt;folder&gt;  新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</span><br><span class="line"><span class="comment">// 我这里输入 hexo init blog ，完成后会在文件夹下新建了一个blog的文件夹来存放网站</span></span><br><span class="line"><span class="symbol">$</span> cd &lt;folder&gt; <span class="comment">// 切换到站点根目录</span></span><br><span class="line"><span class="comment">// 输入 cd blog</span></span><br><span class="line"><span class="symbol">$</span> npm install</span><br><span class="line"><span class="symbol">$</span> hexo g <span class="comment">// generetor的缩写  生成博客静态文件</span></span><br><span class="line"><span class="symbol">$</span> hexo s <span class="comment">// server的缩写 启动本地服务器</span></span><br></pre></td></tr></table></figure></div>
<p>浏览器输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 访问 </p>
<p>成功了！！！</p>
<h2 id="hexo主题更换"><a href="#hexo主题更换" class="headerlink" title="hexo主题更换"></a>hexo主题更换</h2><p>显示的是默认的主题，这里我们可以更换主题</p>
<p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网主题</a></p>
<p><a href="https://www.haomwei.com/" target="_blank" rel="noopener">https://www.haomwei.com/</a> 响应式的主题</p>
<p>github 上有大量的主题可供选择，这里我选择使用 nexT 主题，<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> </p>
<ul>
<li><p>下载主题相关文件</p>
</li>
<li><p>1.第一种方法：可以直接在此网站下载文件，下载后放到当前目录下的 themes 里面的 next 文件夹中。( next 文件夹自己新建 )</p>
</li>
<li><p>2.第二种方法：在此文件夹 -&gt; 右键 -&gt; 打开命令提示符 -&gt; 输入 [ git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next ]</p>
<blockquote>
<p>以上代码的意思是从 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> 将 next 下载到当前目录下的 themes 里面的 next 文件夹中。</p>
</blockquote>
</li>
<li><p>更换主题</p>
</li>
<li>打开配置文件( 配置文件就是根目录下的 _config.yml 文件 )</li>
<li>查找到 theme 字段，后面跟着的 landscape 是默认的主题，改成我们现在下载的 next 就可以了</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AUTOIT"><figure class="iseeu highlight /autoit"><table><tr><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAMS"><figure class="iseeu highlight /gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> hexo clean  <span class="comment">// 清除缓存</span></span><br><span class="line"><span class="symbol">$</span> hexo g  <span class="comment">// 重新生成代码</span></span><br><span class="line"><span class="symbol">$</span> hexo s  <span class="comment">// 部署到本地</span></span><br><span class="line"><span class="comment">//然后打开浏览器访问 localhost:4000 查看效果</span></span><br></pre></td></tr></table></figure></div>
<p>nexT主题有三种选择，这个只是最简洁的一种，我们选择最好看的那个。</p>
<blockquote>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
</blockquote>
<ul>
<li>在 站点根目录/themes/next/_congig.yml 文件中修改</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AVRASM"><figure class="iseeu highlight /avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">scheme:</span> Pisces</span><br></pre></td></tr></table></figure></div>
<p>然后重新clean，generator，server查看效果:</p>
<p>可以自定义主题，甚至修改源码，定制自己的主题，具体请查看<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">官网文档</a></p>
<h2 id="将本地博客上传到-GitHub"><a href="#将本地博客上传到-GitHub" class="headerlink" title="将本地博客上传到 GitHub"></a>将本地博客上传到 GitHub</h2><ol>
<li>注册 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></li>
<li>创建新项目( New repository )</li>
<li><p>按格式输入项目名称( Repository name ) </p>
<blockquote>
<p>项目名必须为：用户名.github.io 。把 [ Initialize this repository with a README ] 勾选上</p>
</blockquote>
</li>
<li><p>点击设置( setting ) </p>
</li>
<li>往下拉，找到 GitHub pages ，choose theme 选择则一个主题，随便选，后面会覆盖掉</li>
</ol>
<blockquote>
<p>这个时候访问一下你的链接，应该可以看到效果，接下来将我们Hexo的代码部署到github上</p>
</blockquote>
<ol start="6">
<li>修改hexo站点的配置文件 _config.yml，修改如下</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LESS"><figure class="iseeu highlight /less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/maze365.github.io.git</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br><span class="line">    <span class="comment">//冒号后面要有空格，缩进为两个空格</span></span><br></pre></td></tr></table></figure></div>
<p>7.使用 git 部署一下就好了<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAMS"><figure class="iseeu highlight /gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> npm install hexo-deployer-git --save</span><br><span class="line"><span class="comment">//装个插件</span></span><br><span class="line"><span class="symbol">$</span> hexo d  <span class="comment">//  部署的命令</span></span><br><span class="line"><span class="comment">//等一会就好了</span></span><br></pre></td></tr></table></figure></div></p>
<h2 id="发布你的第一篇博客"><a href="#发布你的第一篇博客" class="headerlink" title="发布你的第一篇博客"></a>发布你的第一篇博客</h2><p>git 根目录下输入 ：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ACTIONSCRIPT"><figure class="iseeu highlight /actionscript"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> <span class="string">"postName"</span></span><br><span class="line"> <span class="comment">//hexo n 也可以 </span></span><br><span class="line"> <span class="comment">//你自己的博客名称，名为postName.md的文件会建在目</span></span><br><span class="line"> <span class="comment">//录/blog/source/_posts下。</span></span><br></pre></td></tr></table></figure></div></p>
<p>文章编辑完成后，执行如下命令来发布:<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAMS"><figure class="iseeu highlight /gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> hexo g <span class="comment">//生成静态页面</span></span><br><span class="line"><span class="symbol">$</span> hexo d <span class="comment">//发布</span></span><br></pre></td></tr></table></figure></div></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"postName"</span> #新建文章</span><br><span class="line">$ hexo new<span class="built_in"> page </span><span class="string">"pageName"</span> #新建页面</span><br><span class="line">$ hexo generate #生成静态页面至public目录</span><br><span class="line">$ hexo<span class="built_in"> server </span>#开启预览访问端口（默认端口4000，<span class="string">'ctrl + c'</span>关闭server）</span><br><span class="line">$ hexo deploy #将.deploy目录部署到GitHub </span><br><span class="line">$ hexo help # 查看帮助</span><br><span class="line">$ hexo version #查看Hexo的版本</span><br></pre></td></tr></table></figure></div>
<h2 id="重启-hexo"><a href="#重启-hexo" class="headerlink" title="重启 hexo"></a>重启 hexo</h2><p>关闭服务器后，再次重启<br>在站点根目录下 git<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ELIXIR"><figure class="iseeu highlight /elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>npm install</span><br><span class="line"><span class="variable">$ </span>hexo g</span><br><span class="line"><span class="variable">$ </span>hexo s</span><br></pre></td></tr></table></figure></div></p>
<p> 参考文章：<a href="https://blog.csdn.net/Hoshea_chx/article/details/78826689" target="_blank" rel="noopener">https://blog.csdn.net/Hoshea_chx/article/details/78826689</a></p>
<p> 参考文章：<a href="https://blog.csdn.net/AinUser/article/details/77609180" target="_blank" rel="noopener">https://blog.csdn.net/AinUser/article/details/77609180</a></p>
<p> <a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">hexo官网</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-electron 批量生成 pdf</title>
    <url>/vue-electron%20%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%20pdf.html</url>
    <content><![CDATA[<blockquote>
<p>最近有个需求，需要批量下载 pdf，单份还好，但多份时会超时。<br>需要改成一份一份下载，先选择下载的存储路径，再自动下载到选择的目录中，一开始使用了 will-download，但在测试过程中，测服下载速度很慢，发现保存地址还是会弹出来，下载一次弹出一份。<br>因此打算试试利用 electron 原来的生成 pdf 功能</p>
</blockquote>
<blockquote>
<p>计划利用一个隐藏窗口来生成PDF，打开隐藏窗口后，加载数据，判断加载完成后，开始生成 PDF 页面，会涉及到 electron 的打开新窗口、选择文件夹、生成 PDF 三个功能</p>
</blockquote>
<p>官方API</p>
<ul>
<li>选择存储目录 <a href="https://www.electronjs.org/docs/api/dialog" target="_blank" rel="noopener">对话框 showOpenDialog</a></li>
<li>打开新窗口 <a href="https://www.electronjs.org/docs/api/browser-window" target="_blank" rel="noopener">BrowserWindow</a></li>
<li>生成 PDF <a href="https://www.electronjs.org/docs/api/web-contents#contentsprinttopdfoptions" target="_blank" rel="noopener">printToPDF</a></li>
<li>窗口间通信 <a href="https://www.electronjs.org/docs/api/ipc-main" target="_blank" rel="noopener">ipcMain</a></li>
</ul>
<h1 id="选择存储目录"><a href="#选择存储目录" class="headerlink" title="选择存储目录"></a>选择存储目录</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TYPESCRIPT"><figure class="iseeu highlight /typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 监听方法一般放在 created 就行</span></span><br><span class="line">    ipcRenderer.on(<span class="string">'selected-directory'</span>, <span class="function">(<span class="params">event, path</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.fileSavePath = path</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">ipcRenderer.send(<span class="string">'select-file-dialog'</span>)</span><br><span class="line"></span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">    <span class="comment">// 因为 .on 监听方法会一直存在，导致多次监听，所以每次退出页面把监听移除掉就行了</span></span><br><span class="line">    ipcRenderer.removeAllListeners(<span class="string">'selected-directory'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="COFFEESCRIPT"><figure class="iseeu highlight /coffeescript"><table><tr><td class="code"><pre><span class="line">&lt;!--main.js--&gt;</span><br><span class="line">const &#123;ipcMain, dialog&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">ipcMain.<span class="literal">on</span>(<span class="string">'select-file-dialog'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</span><br><span class="line">  dialog.showOpenDialog(&#123;</span><br><span class="line">    title: <span class="string">'选择文件夹'</span>,</span><br><span class="line">    buttonLabel: <span class="string">'确定'</span>,</span><br><span class="line">    properties: [<span class="string">'openFile'</span>, <span class="string">'openDirectory'</span>]</span><br><span class="line">  &#125;, <span class="function"><span class="params">(files)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (files) &#123;</span><br><span class="line">    <span class="regexp">//</span> 将得到的路径传回页面存起来</span><br><span class="line">      event.sender.send(<span class="string">'selected-directory'</span>, files)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<h1 id="打开新窗口"><a href="#打开新窗口" class="headerlink" title="打开新窗口"></a>打开新窗口</h1><h2 id="主进程打开新窗口并跳到某个页面"><a href="#主进程打开新窗口并跳到某个页面" class="headerlink" title="主进程打开新窗口并跳到某个页面"></a>主进程打开新窗口并跳到某个页面</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TYPESCRIPT"><figure class="iseeu highlight /typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;href&#125; = <span class="keyword">this</span>.$router.resolve(&#123;</span><br><span class="line">    name: urlName,</span><br><span class="line">    query: &#123; id: <span class="keyword">this</span>.id, pdfPath: <span class="keyword">this</span>.pdfPath&#125;</span><br><span class="line">&#125;);</span><br><span class="line">ipcRenderer.send(<span class="string">'open-window'</span>, <span class="string">`<span class="subst">$&#123;href&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sideWIndow</span><br><span class="line">ipcMain.on(<span class="string">'open-window'</span>, <span class="function">(<span class="params">event, _data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 判断下隐藏窗口是否存在，如果不存在才打开一个新窗口</span></span><br><span class="line">  <span class="keyword">if</span> (!sideWIndow) &#123;</span><br><span class="line">    sideWIndow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">      width: <span class="number">1280</span>,</span><br><span class="line">      height: <span class="number">720</span>,</span><br><span class="line">      show: <span class="literal">false</span> <span class="comment">// 是否隐藏窗口，在测试过程中，可以先改成 true 来看跳转的页面是否正确</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断了下是否是开发环境</span></span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/index.html<span class="subst">$&#123;_data&#125;</span>`</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    url = <span class="string">`http://localhost:9080<span class="subst">$&#123;_data&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 子窗口加载页面</span></span><br><span class="line">  sideWIndow.loadURL(url)</span><br><span class="line">  sideWIndow.on(<span class="string">'closed'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    sideWIndow = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 关闭窗口的指令</span></span><br><span class="line">ipcMain.on(<span class="string">'close-window'</span>, <span class="function">(<span class="params">event, _data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (sideWIndow) &#123;</span><br><span class="line">    sideWIndow.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<h2 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="COFFEESCRIPT"><figure class="iseeu highlight /coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 退出此页面时，关闭窗口</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">    ipcRenderer.send(<span class="string">'close-window'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 主窗口有个关闭窗口事件，我们在这里也加个判断，把隐藏窗口一起关了</span><br><span class="line">mainWindow.<span class="literal">on</span>(<span class="string">'closed'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    mainWindow = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (sideWindow) &#123;</span><br><span class="line">      sideWindow.close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<h1 id="生成-pdf"><a href="#生成-pdf" class="headerlink" title="生成 pdf"></a>生成 pdf</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MOONSCRIPT"><figure class="iseeu highlight /moonscript"><table><tr><td class="code"><pre><span class="line">// 这里生成报告页还是一份一份生成的，只要在前端遍历，有接收到生成成功的信号，就在下载下一份就可以了</span><br><span class="line">// html</span><br><span class="line">// 生成 PDF 需要一个存储路径，以及文件名</span><br><span class="line">ipcRenderer.send(<span class="string">'print-all-pdf'</span>, <span class="string">'E:\name.pdf'</span>)</span><br><span class="line">// 接收</span><br><span class="line">ipcRenderer.on(<span class="string">'wrote-all-pdf'</span>, <span class="function"><span class="params">(event, data)</span> =&gt;</span> &#123;</span><br><span class="line">    console.log(<span class="string">'报告下载成功！'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;!<span class="comment">--main.js--&gt;</span></span><br><span class="line">// 生成 PDF 放在同个页面新建窗口的同一个页面</span><br><span class="line">// mainWindow 是主窗口,用来接收子窗口下载报告成功的指令</span><br><span class="line">const fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">ipcMain.on(<span class="string">'print-all-pdf'</span>, <span class="function"><span class="params">(event, _data)</span> =&gt;</span> &#123;</span><br><span class="line">  const pdfPath = _data</span><br><span class="line">  sideWindow.webContents.printToPDF(&#123;&#125;, <span class="function"><span class="params">(<span class="built_in">error</span>, data)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">error</span>) console.<span class="built_in">error</span>(<span class="built_in">error</span>)</span><br><span class="line">    fs.writeFile(pdfPath, data, <span class="function"><span class="params">(<span class="built_in">error</span>)</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">error</span>) &#123;</span><br><span class="line">        console.<span class="built_in">error</span>(<span class="built_in">error</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">error</span>) &#123;</span><br><span class="line">        mainWindow.webContents.send(<span class="string">'wrote-all-pdf-err'</span>, pdfPath)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mainWindow.webContents.send(<span class="string">'wrote-all-pdf'</span>, pdfPath)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">ipcMain.on(<span class="string">'print-err-pdf'</span>, <span class="function"><span class="params">(event, _data)</span> =&gt;</span> &#123;</span><br><span class="line">  mainWindow.webContents.send(<span class="string">'wrote-all-pdf-err'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>在下载成功的时候，可以触发事件去下载下一份报告</p>
]]></content>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>纯 html 文件中怎么使用 sass</title>
    <url>/%E7%BA%AF-html-%E6%96%87%E4%BB%B6%E4%B8%AD%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8-sass.html</url>
    <content><![CDATA[<p>sass 是一种流行的 CSS 预处理器，它能够让开发者使用嵌套语法和变量，以及一些其他的便利功能，来更加高效地编写 CSS 样式表。</p>
<blockquote>
<p>没有使用 npm 安装 sass，在平时的纯 html 页面中，要怎么才能使用 sass</p>
</blockquote>
<h1 id="安装-Ruby"><a href="#安装-Ruby" class="headerlink" title="安装 Ruby"></a>安装 Ruby</h1><p><a href="http://www.ruby-lang.org/zh_cn/downloads/" target="_blank" rel="noopener">http://www.ruby-lang.org/zh_cn/downloads/</a></p>
<h1 id="安装-sass"><a href="#安装-sass" class="headerlink" title="安装 sass"></a>安装 sass</h1><p>cmd 命令行输入下面的命令</p>
<pre><code>gem install sass
</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><blockquote>
<p>文件夹名称不能是中文，否则会编译失败</p>
</blockquote>
<ul>
<li>单文件编译</li>
</ul>
<!---->
<pre><code>sass &lt;要编译的Sass文件路径&gt;/style.scss:&lt;要输出CSS文件路径&gt;/style.css
</code></pre><ul>
<li><p>多文件编译<br>sass sass/\:css/（表示“sass”文件夹中所有的”.scss”文件编译成”.css”文件，并且将这些css文件放到“css”文件夹中）</p>
</li>
<li><p>自动监测（主要使用）<br><code>sass --watch&lt;要编译的Sass文件路径&gt;/style.scss:&lt;要输出CSS文件路径&gt;/style.css</code>（.scss文件每次修改按ctrl+s保存都会实时的反映到输出的.css文件中）</p>
</li>
</ul>
<!---->
<pre><code>:expanded 普通样式
:compact 一个样式一行
:compressed 所有样式一行
</code></pre><p>先打开命令行工具，进入到具体的文件夹，然后再执行使用命令。</p>
<p>例子：<br>我有一个项目放在了 <code>E</code> 盘，名称叫 <code>sass-project</code>，里面有一个 <code>sass</code> 和 <code>css</code> 文件夹。<br>打开 <code>cmd</code>,<code>E:</code>进入到 E 盘，然后使用 <code>cd</code> 进入到 <code>sass-project</code>文件夹，接下来执行下面的命令就行</p>
<pre><code>sass --watch sass:css --style compact
</code></pre><!---->
<pre><code>ctrl+c 停止
</code></pre><p><img src="/images/2023-3-11-1.png" alt="image"></p>
<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code>　　$blue : #1875e7;　
　　div {
　　　color : $blue;
　　}
</code></pre><h2 id="计算功能"><a href="#计算功能" class="headerlink" title="计算功能"></a>计算功能</h2><pre><code>　　body {
　　　　margin: (14px/2);
　　　　top: 50px + 100px;
　　　　right: $var * 10%;
　　}
</code></pre><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><pre><code>　　div {
　　　　h1 {
　　　　　　color:red;
　　　　}
　　}
　　border-color属性
　　p { 
　　　　border: {
　　　　　　color: red;
　　　　}
　　}
　　a:hover
　　a {
　　　　&amp;:hover { color: #ffb3ff; }
　　}
</code></pre><h2 id="代码的重用"><a href="#代码的重用" class="headerlink" title="代码的重用"></a>代码的重用</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre><code>.class1 {
　　　　border: 1px solid #ddd;
　　}
　　.class2 {
　　　　@extend .class1;
　　　　font-size:120%;
　　}
</code></pre><h3 id="Mixin-重用代码块-可以指定参数和缺省值"><a href="#Mixin-重用代码块-可以指定参数和缺省值" class="headerlink" title="Mixin (重用代码块) 可以指定参数和缺省值"></a>Mixin (重用代码块) 可以指定参数和缺省值</h3><pre><code>　　@mixin left {
　　　　float: left;
　　　　margin-left: 10px;
　　}
　　div {
　　　　@include left;
　　}
</code></pre><p>eg: mixin的实例，用来生成浏览器前缀</p>
<pre><code>　　@mixin rounded($vert, $horz, $radius: 10px) {
　　　　border-#{$vert}-#{$horz}-radius: $radius;
　　　　-moz-border-radius-#{$vert}#{$horz}: $radius;
　　　　-webkit-border-#{$vert}-#{$horz}-radius: $radius;
　　}
　　&lt;!--调用--&gt;
　　#navbar li { @include rounded(top, left); }
　　#footer { @include rounded(top, left, 5px); }
</code></pre><h2 id="颜色函数"><a href="#颜色函数" class="headerlink" title="颜色函数"></a>颜色函数</h2><p>SASS提供了一些内置的颜色函数，以便生成系列颜色。</p>
<pre><code>　　lighten(#cc3, 10%) // #d6d65c
　　darken(#cc3, 10%) // #a3a329
　　grayscale(#cc3) // #808080
　　complement(#cc3) // #33c
</code></pre><h2 id="插入文件"><a href="#插入文件" class="headerlink" title="插入文件"></a>插入文件</h2><pre><code>@import &quot;path/filename.scss&quot;;
@import &quot;foo.css&quot;;
</code></pre><h1 id="支持中文注释方法"><a href="#支持中文注释方法" class="headerlink" title="支持中文注释方法"></a>支持中文注释方法</h1><ul>
<li>在 scss 文件头加上 <code>@charset &quot;utf-8&quot;;</code></li>
<li>查看出错的 css 文件</li>
</ul>
<!---->
<pre><code>Backtrace:
sass/shop.scss:4
C:/Ruby26/lib/ruby/gems/2.6.0/gems/sass-3.7.3/lib/sass/util.rb:1090:in `rescue in block in find_encoding_error&apos;
C:/Ruby26/lib/ruby/gems/2.6.0/gems/sass-3.7.3/lib/sass/util.rb:1087:in `block in find_encoding_error&apos;
C:/Ruby26/lib/ruby/gems/2.6.0/gems/sass-3.7.3/lib/sass/util.rb:1086:in `each&apos;
C:/Ruby26/lib/ruby/gems/2.6.0/gems/sass-3.7.3/lib/sass/util.rb:1086:in `each_with_index&apos;
C:/Ruby26/lib/ruby/gems/2.6.0/gems/sass-3.7.3/lib/sass/util.rb:1086:in `find_encoding_error&apos;
C:/Ruby26/lib/ruby/gems/2.6.0/gems/sass-3.7.3/lib/sass/util.rb:820:in `rescue in check_sass_encoding&apos;
</code></pre><p>得到路径 <code>C:/Ruby26/lib/ruby/gems/2.6.0/gems/sass-3.7.3/lib/sass</code></p>
<p>里面有一个文件<code>engine.rb</code>打开</p>
<pre><code>require &apos;sass/scss&apos;
require &apos;sass/stack&apos;
require &apos;sass/error&apos;
require &apos;sass/importers&apos;
require &apos;sass/shared&apos;
require &apos;sass/media&apos;
require &apos;sass/supports&apos;
</code></pre><p>我们在一连串的 require 后面加上代码</p>
<pre><code>Encoding.default_external = Encoding.find(&apos;utf-8&apos;)
</code></pre><p>最后再重启 sass 一下就好了</p>
<p>更详细的使用可以参考：<a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2012/06/sass.html</a></p>
]]></content>
      <tags>
        <tag>sass</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>用 C# 开发小软件.md</title>
    <url>/%E7%94%A8C-%E5%BC%80%E5%8F%91%E5%B0%8F%E8%BD%AF%E4%BB%B6.html</url>
    <content><![CDATA[<p>之前同事发给我一个软件，是  C# 写的，非常的小巧，比 electron 小太多了。最近突发奇想想要自己尝试写一个小软件。</p>
<p>需求如下：<br>三个按钮，第一个按钮叫记录，第二个按钮叫暂停，点击记录按钮记录当前时间，显示在页面上，点击暂停按钮记录当前时间显示在页面上，并计算两个时间的时间差，以时-分的格式显示在软件上。 继续点击记录和暂停按钮，继续计算时间差，并和上一次记录的时间差进行一个累加同样显示在页面上。 最后一个按钮命名清空，可以清空页面上所有文本信息。</p>
<p>开发环境：Visual Studio 2015</p>
<h2 id="步骤-1-创建-Windows-窗体应用程序"><a href="#步骤-1-创建-Windows-窗体应用程序" class="headerlink" title="步骤 1 - 创建 Windows 窗体应用程序"></a>步骤 1 - 创建 Windows 窗体应用程序</h2><p>首先，我们需要创建一个新的 Windows 窗体应用程序。打开 Visual Studio，并在菜单中选择 “文件” -&gt; “新建” -&gt; “项目”。在 “新建项目” 对话框中，选择 “Windows 窗体应用程序” 并为其命名（例如：TimeRecorder）。然后，点击 “确定” 按钮创建新项目。这个时候 Visual Studio 会自动为我们创建一个空的窗体应用程序。</p>
<h2 id="步骤-2-添加-UI-控件"><a href="#步骤-2-添加-UI-控件" class="headerlink" title="步骤 2 - 添加 UI 控件"></a>步骤 2 - 添加 UI 控件</h2><p>接下来，我们需要向窗体中添加三个按钮(Button)和一些文本框(Label)用于显示时间记录信息。在 Visual Studio 的工具箱中，找到按钮控件并拖动三个按钮到窗体上。另外，也从工具箱中拖动三个文本框控件到窗体上，一个用于显示开始时间，另一个用于显示结束时间，还有一个显示时间差。</p>
<p><img src="images/20230422_1.png" alt></p>
<h2 id="步骤-3-编写事件处理程序"><a href="#步骤-3-编写事件处理程序" class="headerlink" title="步骤 3 - 编写事件处理程序"></a>步骤 3 - 编写事件处理程序</h2><p>当用户单击任何一个按钮时，需要调用一个事件处理程序来执行相应的操作。双击按钮，Visual Studio 将自动在源代码文件中创建事件处理程序。</p>
<p>首先，在窗体类中添加成员变量来保存开始和结束时间：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CS"><figure class="iseeu highlight /cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> DateTime startTime;</span><br><span class="line">    <span class="keyword">private</span> DateTime endTime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>接下来，定义每个按钮的单击事件处理程序。记录按钮单击事件将保存当前时间并在开始时间文本框中显示它：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CS"><figure class="iseeu highlight /cs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnRecord_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    startTime = DateTime.Now;</span><br><span class="line">    txtStart.Text = startTime.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>暂停按钮单击事件将保存当前时间并在结束时间文本框中显示它。然后计算时间差，并在时间差文本框中显示它：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MATHEMATICA"><figure class="iseeu highlight /mathematica"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">private void btnPause_Click(object sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    endTime = DateTime.<span class="keyword">Now</span>;</span><br><span class="line">    txtEnd.<span class="keyword">Text</span> = endTime.<span class="keyword">ToString</span>();</span><br><span class="line"></span><br><span class="line">    TimeSpan timeDiff = endTime - startTime;</span><br><span class="line">    txtTimeDiff.<span class="keyword">Text</span> = string.<span class="keyword">Format</span>(<span class="string">"&#123;0:00&#125;:&#123;1:00&#125;"</span>,</span><br><span class="line">        (int)timeDiff.TotalHours, timeDiff.Minutes);</span><br><span class="line"></span><br><span class="line">    startTime = DateTime.<span class="keyword">MinValue</span>;</span><br><span class="line">    endTime = DateTime.<span class="keyword">MinValue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>最后一个按钮是清空按钮，它将清空所有文本框：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARMASM"><figure class="iseeu highlight /armasm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="symbol">private</span> void <span class="keyword">btnClear_Click(object </span>sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    txtStart<span class="meta">.Text</span> = <span class="string">""</span><span class="comment">;</span></span><br><span class="line">    txtEnd<span class="meta">.Text</span> = <span class="string">""</span><span class="comment">;</span></span><br><span class="line">    txtTimeDiff<span class="meta">.Text</span> = <span class="string">""</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h2 id="步骤-4-绑定按钮"><a href="#步骤-4-绑定按钮" class="headerlink" title="步骤 4 - 绑定按钮"></a>步骤 4 - 绑定按钮</h2><p>在程序中，文本框我们使用了 <code>txtStart</code>，’txtEnd’，’txtTimeDiff’ 三个，我们需要做下绑定。</p>
<p>单机一下设计图的 label，在右边找到 Name 属性，分别依次改成上面三个值。</p>
<p><img src="images/20230422_2.png" alt></p>
<h2 id="步骤-5-运行程序"><a href="#步骤-5-运行程序" class="headerlink" title="步骤 5 - 运行程序"></a>步骤 5 - 运行程序</h2><p>现在，我们已经完成了这个简单的应用程序的开发。按 F5 键运行应用程序，然后单击记录按钮来记录时间。单击暂停按钮来结束计时并显示时间差。可以一次又一次地按下记录和暂停按钮以记录更多时间段。最后，单击清空按钮清空所有文本框。</p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>以下是完整的 C# 代码，可以复制并粘贴到 Form1.cs 文件中：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CS"><figure class="iseeu highlight /cs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">setTime</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> DateTime startTime;</span><br><span class="line">        <span class="keyword">private</span> DateTime endTime;</span><br><span class="line">        <span class="keyword">private</span> TimeSpan totalTimeDiff;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            button2.Enabled = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnRecord_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            startTime = DateTime.Now;</span><br><span class="line">            txtStart.Text = <span class="string">"开始："</span> + startTime.ToString();</span><br><span class="line">            txtEnd.Text = <span class="string">""</span>;</span><br><span class="line">            button1.Enabled = <span class="literal">false</span>; <span class="comment">// 禁止按钮点击</span></span><br><span class="line">            button2.Enabled = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnPause_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            endTime = DateTime.Now;</span><br><span class="line">            txtEnd.Text = <span class="string">"结束："</span> + endTime.ToString();</span><br><span class="line"></span><br><span class="line">            TimeSpan timeDiff = endTime - startTime;</span><br><span class="line">            totalTimeDiff += timeDiff;</span><br><span class="line">            txtTimeDiff.Text = <span class="string">"时间差："</span> + <span class="keyword">string</span>.Format(<span class="string">"&#123;0:00&#125;:&#123;1:00&#125;:&#123;2:00&#125;"</span>,</span><br><span class="line">                (<span class="keyword">int</span>)totalTimeDiff.TotalHours, totalTimeDiff.Minutes, totalTimeDiff.Seconds);</span><br><span class="line"></span><br><span class="line">            startTime = DateTime.MinValue;</span><br><span class="line">            endTime = DateTime.MinValue;</span><br><span class="line">            button1.Enabled = <span class="literal">true</span>;</span><br><span class="line">            button2.Enabled = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnClear_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            txtStart.Text = <span class="string">""</span>;</span><br><span class="line">            txtEnd.Text = <span class="string">""</span>;</span><br><span class="line">            txtTimeDiff.Text = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>注意：上述代码中的按钮单击事件处理程序是自动生成的，需要将它们与相应的按钮相关联。可以在 Visual Studio 的属性窗口中为每个按钮选择相应的事件处理程序。</p>
<p>可以在下图箭头所指的 click 右边可以修改按钮的事件名，将其关联起来。</p>
<p><img src="images/20230422_3.png" alt></p>
<p>如果是使用 Visual Studio 开发 Windows 窗体应用程序，可以在设计模式下双击按钮或者单击按钮然后在属性窗口中选择单击事件，在下拉菜单中选择对应的事件处理方法即可。</p>
<p>具体步骤如下：</p>
<ol>
<li>在 Visual Studio 中打开相应的窗体设计器。</li>
<li>选择要添加事件处理程序的按钮。</li>
<li>在属性窗口中查找事件属性（通常以“Events”为后缀）。</li>
<li>单击事件属性旁边的下拉箭头，选择相应的事件处理程序。</li>
<li>双击所选的事件处理程序名称，Visual Studio 将自动生成该事件的处理方法（这通常是一个空方法）。</li>
<li>在生成的方法中编写处理逻辑。</li>
</ol>
<p>注意：如果使用 C# 手动编写代码而不是通过设计器来添加事件处理程序，也可以在程序的入口点手动绑定按钮事件和处理程序。例如，在 Form1 类的构造函数中添加以下代码来绑定按钮单击事件：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HAXE"><figure class="iseeu highlight /haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Form1()</span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    <span class="built_in">this</span>.btnRecord.Click += <span class="keyword">new</span> <span class="type">EventHandler</span>(btnRecord_Click);</span><br><span class="line">    <span class="built_in">this</span>.btnPause.Click += <span class="keyword">new</span> <span class="type">EventHandler</span>(btnPause_Click);</span><br><span class="line">    <span class="built_in">this</span>.btnClear.Click += <span class="keyword">new</span> <span class="type">EventHandler</span>(btnClear_Click);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h2 id="打包程序"><a href="#打包程序" class="headerlink" title="打包程序"></a>打包程序</h2><p>使用 Visual Studio 的发布功能。具体步骤:</p>
<ol>
<li>在解决方案资源管理器中右键你的项目,选择 “发布”。</li>
<li>在发布向导中选择 “文件夹” 作为发布目标。这会直接发布成文件夹。</li>
<li>选中或取消选中需要发布的文件。一般保留默认选择即可。</li>
<li>点击发布按钮,选择发布位置。发布过程完成后,会在指定位置生成项目文件夹。 </li>
<li>将此项目文件夹压缩为 zip 文件。用户只需下载解压此 zip 文件,直接运行项目文件夹内的 exe 文件即可运行程序。</li>
<li>如果需要,也可以在发布后进一步使用 ILMerger、Costura 等工具将程序文件合并成单个 exe,以简化部署。  </li>
<li>还可以通过修改项目属性,更改输出类型为“Windows 应用程序”或“控制台应用程序”等，从而生成独立的 exe 可执行文件。 使用 Visual Studio 的一键发布功能,可以非常便捷地将 C# 项目打包为展示版本或发布版本。生成的文件夹或压缩包中包含项目运行所需的所有文件，用户只需要一键运行即可。 这种简单的发布方式适用于许多基本的应用程序,如果需要更专业的安装程序，可以使用 Installer 或 ClickOnce 等方式。</li>
</ol>
<p><img src="images/20230422_4.png" alt></p>
<p><img src="images/20230422_5.png" alt></p>
<p>使用 Visual Studio 发布功能生成的程序文件夹或者压缩包并非标准的安装程序，所以无法自动在桌面或开始菜单中生成快捷方式。 如果需要生成带有自动快捷方式和菜单项的标准安装程序，可以使用其它方法打包程序，方法如下:</p>
<ol>
<li>Installer 项目 - 可以生成 MSI 安装包,双击后可以自动安装程序，在桌面、开始菜单生成快捷方式和菜单项。适用于较复杂的应用程序安装,需要安装多个文件和注册表entries等。</li>
<li>ClickOnce 部署 - 可以生成基于浏览器的安装程序,点击后自动安装应用程序,并在桌面生成快捷方式。适用于较简单的应用程序,无需管理员权限安装。</li>
<li>Inno Setup - 这是一个开源软件,可以生成 exe 安装程序。安装后在桌面和开始菜单生成快捷方式。操作较简单，但功能也较简单,不支持复杂的安装步骤。</li>
<li>Advanced Installer - 这是一个付费软件，可以生成 MSI 或 exe 安装程序。功能强大,可以实现复杂的安装步骤和界面，安装后自动创建快捷方式和菜单。</li>
</ol>
<h2 id="修改图标"><a href="#修改图标" class="headerlink" title="修改图标"></a>修改图标</h2><p>要为应用程序修改图标,可以通过以下几种方法:</p>
<ol>
<li>修改项目属性中的应用程序图标: 在解决方案资源管理器中右键你的项目,选择“属性”。在弹出的属性页中,选中“应用程序”选项卡。在“图标”下，点击“更改图标”按钮，选择新的图标文件并确定即可。 这会更改 exe 文件和安装程序的默认图标。</li>
<li>软件左上角的小图标,称为任务栏图标或通知区图标。要修改这个图标，可以: 将新图标文件添加到 Visual Studio 解决方案资源管理器中的 “图标” 或 “图像”文件夹。然后:</li>
</ol>
<ul>
<li>双击新图标,选择“资源嵌入”选项。这会将图标嵌入到项目资源中。</li>
<li>打开主窗体(Form1)，在属性窗口点击“图标”属性旁的省略号按钮 (…)。</li>
<li>在“选择资源”对话框中，选择刚才嵌入的图标资源,确定。 这会更改主窗体和生成的 exe 的图标。</li>
</ul>
<p><img src="images/20230422_6.png" alt></p>
<p><img src="images/20230422_7.png" alt></p>
]]></content>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
</search>
